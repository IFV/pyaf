INFO:pyaf.std:START_TRAINING 'Signal'
GENERATING_RANDOM_DATASET Signal_320_D_0_constant_0__0.0_20
TREND 9.76270078546495 4.30378732744839 1.2055267521432877
/home/antoine/dev/python/packages/pyaf/TS/Perf.py:50: RuntimeWarning: divide by zero encountered in true_divide
  self.mMASE = np.mean(abs_error / mean_dev_signal)
INFO:pyaf.std:END_TRAINING_TIME_IN_SECONDS 'Signal' 6.307196617126465
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2000-01-01 00:00:00 TimeMax=2000-08-27 00:00:00 TimeDelta=1 days 00:00:00 Estimation = (0 , 240) Validation = (240 , 300) Test = (300 , 310) Horizon=10
INFO:pyaf.std:SIGNAL_DETAIL SignalVariable='_Signal' Min=9.76270078546 Max=9.76270078546  Mean=9.76270078546 StdDev=1.7763568394e-15
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_Signal_ConstantTrend_residue_zeroCycle_residue_NoAR' [ConstantTrend + NoCycle + NoAR]
INFO:pyaf.std:TREND_DETAIL '_Signal_ConstantTrend' [ConstantTrend]
INFO:pyaf.std:CYCLE_DETAIL '_Signal_ConstantTrend_residue_zeroCycle' [NoCycle]
INFO:pyaf.std:AUTOREG_DETAIL '_Signal_ConstantTrend_residue_zeroCycle_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0 MAPE_Forecast=0.0 MAPE_Test=0.0
INFO:pyaf.std:MODEL_MASE MASE_Fit=inf MASE_Forecast=inf MASE_Test=inf
INFO:pyaf.std:MODEL_L1 L1_Fit=3.5527136788e-15 L1_Forecast=3.5527136788e-15 L1_Test=3.5527136788e-15
INFO:pyaf.std:MODEL_L2 L2_Fit=3.5527136788e-15 L2_Forecast=3.5527136788e-15 L2_Test=3.5527136788e-15
INFO:pyaf.std:MODEL_COMPLEXITY 0
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
Forecast Columns  Index(['Date', 'Signal', '_Signal', 'row_number', 'Date_Normalized',
       '_Signal_ConstantTrend', '_Signal_ConstantTrend_residue',
       '_Signal_ConstantTrend_residue_zeroCycle',
       '_Signal_ConstantTrend_residue_zeroCycle_residue',
       '_Signal_ConstantTrend_residue_zeroCycle_residue_NoAR',
       '_Signal_ConstantTrend_residue_zeroCycle_residue_NoAR_residue',
       '_Signal_Trend', '_Signal_Trend_residue', '_Signal_Cycle',
       '_Signal_Cycle_residue', '_Signal_AR', '_Signal_AR_residue',
       '_Signal_TransformedForecast', '_Signal_TransformedResidue',
       'Signal_Forecast', 'Signal_Residue', 'Signal_Forecast_Lower_Bound',
       'Signal_Forecast_Upper_Bound'],
      dtype='object')
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 320 entries, 0 to 319
Data columns (total 3 columns):
Date               320 non-null datetime64[ns]
Signal             310 non-null float64
Signal_Forecast    320 non-null float64
dtypes: datetime64[ns](1), float64(2)
memory usage: 7.6 KB
None
Forecasts
 [[Timestamp('2000-11-06 00:00:00') nan 9.762700785464947]
 [Timestamp('2000-11-07 00:00:00') nan 9.762700785464947]
 [Timestamp('2000-11-08 00:00:00') nan 9.762700785464947]
 [Timestamp('2000-11-09 00:00:00') nan 9.762700785464947]
 [Timestamp('2000-11-10 00:00:00') nan 9.762700785464947]
 [Timestamp('2000-11-11 00:00:00') nan 9.762700785464947]
 [Timestamp('2000-11-12 00:00:00') nan 9.762700785464947]
 [Timestamp('2000-11-13 00:00:00') nan 9.762700785464947]
 [Timestamp('2000-11-14 00:00:00') nan 9.762700785464947]
 [Timestamp('2000-11-15 00:00:00') nan 9.762700785464947]]


<ModelInfo>
{
    "Dataset": {
        "Signal": "Signal",
        "Time": {
            "Horizon": 10,
            "TimeMinMax": [
                "2000-01-01 00:00:00",
                "2000-11-05 00:00:00"
            ],
            "TimeVariable": "Date"
        },
        "Training_Signal_Length": 310
    },
    "Model": {
        "AR_Model": "NoAR",
        "Best_Decomposition": "_Signal_ConstantTrend_residue_zeroCycle_residue_NoAR",
        "Cycle": "NoCycle",
        "Signal_Transoformation": "None",
        "Trend": "ConstantTrend"
    },
    "Model_Performance": {
        "COMPLEXITY": "0",
        "MAE": "3.5527136788e-15",
        "MAPE": "0.0",
        "MASE": "inf",
        "RMSE": "3.5527136788e-15"
    }
}
</ModelInfo>




<Forecast>
{"Date":{"300":"2000-10-27T00:00:00.000Z","301":"2000-10-28T00:00:00.000Z","302":"2000-10-29T00:00:00.000Z","303":"2000-10-30T00:00:00.000Z","304":"2000-10-31T00:00:00.000Z","305":"2000-11-01T00:00:00.000Z","306":"2000-11-02T00:00:00.000Z","307":"2000-11-03T00:00:00.000Z","308":"2000-11-04T00:00:00.000Z","309":"2000-11-05T00:00:00.000Z","310":"2000-11-06T00:00:00.000Z","311":"2000-11-07T00:00:00.000Z","312":"2000-11-08T00:00:00.000Z","313":"2000-11-09T00:00:00.000Z","314":"2000-11-10T00:00:00.000Z","315":"2000-11-11T00:00:00.000Z","316":"2000-11-12T00:00:00.000Z","317":"2000-11-13T00:00:00.000Z","318":"2000-11-14T00:00:00.000Z","319":"2000-11-15T00:00:00.000Z"},"Signal":{"300":9.7627007855,"301":9.7627007855,"302":9.7627007855,"303":9.7627007855,"304":9.7627007855,"305":9.7627007855,"306":9.7627007855,"307":9.7627007855,"308":9.7627007855,"309":9.7627007855,"310":null,"311":null,"312":null,"313":null,"314":null,"315":null,"316":null,"317":null,"318":null,"319":null},"Signal_Forecast":{"300":9.7627007855,"301":9.7627007855,"302":9.7627007855,"303":9.7627007855,"304":9.7627007855,"305":9.7627007855,"306":9.7627007855,"307":9.7627007855,"308":9.7627007855,"309":9.7627007855,"310":9.7627007855,"311":9.7627007855,"312":9.7627007855,"313":9.7627007855,"314":9.7627007855,"315":9.7627007855,"316":9.7627007855,"317":9.7627007855,"318":9.7627007855,"319":9.7627007855}}
</Forecast>


/home/antoine/dev/python/packages/pyaf/TS/Perf.py:50: RuntimeWarning: invalid value encountered in true_divide
  self.mMASE = np.mean(abs_error / mean_dev_signal)
/home/antoine/dev/python/packages/pyaf/TS/Perf.py:50: RuntimeWarning: invalid value encountered in true_divide
  self.mMASE = np.mean(abs_error / mean_dev_signal)
/home/antoine/dev/python/packages/pyaf/TS/Perf.py:50: RuntimeWarning: divide by zero encountered in true_divide
  self.mMASE = np.mean(abs_error / mean_dev_signal)
/home/antoine/dev/python/packages/pyaf/TS/Perf.py:50: RuntimeWarning: invalid value encountered in true_divide
  self.mMASE = np.mean(abs_error / mean_dev_signal)
/home/antoine/dev/python/packages/pyaf/TS/Perf.py:50: RuntimeWarning: invalid value encountered in true_divide
  self.mMASE = np.mean(abs_error / mean_dev_signal)
/home/antoine/dev/python/packages/pyaf/TS/Perf.py:50: RuntimeWarning: divide by zero encountered in true_divide
  self.mMASE = np.mean(abs_error / mean_dev_signal)
/home/antoine/dev/python/packages/pyaf/TS/Perf.py:50: RuntimeWarning: invalid value encountered in true_divide
  self.mMASE = np.mean(abs_error / mean_dev_signal)
/home/antoine/dev/python/packages/pyaf/TS/Perf.py:50: RuntimeWarning: invalid value encountered in true_divide
  self.mMASE = np.mean(abs_error / mean_dev_signal)
